###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################

name: d-team_newifi-d2-Lite

on:
  repository_dispatch:
  #push:
  #  branches: 
  #    - master

  #schedule:
  #  - cron: 0 8 * * 5

  #watch:
  #  types: [started]

  workflow_dispatch:
    inputs:
      Tempoary_CONFIG:
        description: 'Configuration'
        default: 'd-team_newifi-d2-Lite'
      Tempoary_FLAG:
        description: 'Firmware Tagging'
        default: 'AUTO'
      Tempoary_IP:
        description: 'IP Address (Optional)'
        default: ''
      UPLOAD_RELEASES:
        description: 'Upload to Releases'
        default: 'true'
        type: boolean
      UPLOAD_ARTIFACTS:
        description: 'Upload to Artifacts'
        default: 'false'
        type: boolean
      UPLOAD_BIN_ARTIFACTS:
        description: 'Upload bin to Artifacts'
        default: 'false'
        type: boolean

### 环境变量设置
env:
# 编译时调用的 [.config] 文件名称
  CONFIG_FILE: d-team_newifi-d2-Lite
# 源码仓库:分支
  DEFAULT_SOURCE: coolsnowwolf/lede:master
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
# 删除早期的 workflow 任务
  DELETE_OLD_WORKFLOW: false
# Cache 加速编译
  CACHE_ACCELERATE: false
### 结束

jobs:
  Compile:
    runs-on: ubuntu-20.04
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Load Custom Variables
      run: |
        git clone -b master https://github.com/xwings/AutoBuild-Actions-BETA AutoBuild-Actions
        
        if [ -n "${{ github.event.inputs.Tempoary_CONFIG }}" ]
        then
            if [ -f "$GITHUB_WORKSPACE/Autobuild-Actions/Configs/${{ github.event.inputs.Tempoary_CONFIG }}" ]
            then
                CONFIG_FILE=${{ github.event.inputs.Tempoary_CONFIG }}
            else
                CONFIG_FILE=${{ env.CONFIG_FILE }}
            fi
        else
            CONFIG_FILE=${{ env.CONFIG_FILE }}
        fi
        if [ ! -f "$GITHUB_WORKSPACE/Autobuild-Actions/Configs/$CONFIG_FILE" ]
        then
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE] is not detected ..."
            ls $GITHUB_WORKSPACE/Autobuild-Actions/Configs/
            exit 1
        else
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE]"
            echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_IP }}" ]
        then
            echo "IP: [${{ github.event.inputs.Tempoary_IP }}]"
            echo "Tempoary_IP=${{ github.event.inputs.Tempoary_IP }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_FLAG }}" ]
        then
            echo "FLAG: [${{ github.event.inputs.Tempoary_FLAG }}]"
            echo "Tempoary_FLAG=${{ github.event.inputs.Tempoary_FLAG }}" >> $GITHUB_ENV
        fi
        REPO_URL="https://github.com/$(cut -d \: -f 1 <<< ${{ env.DEFAULT_SOURCE }})"
        REPO_BRANCH=$(cut -d \: -f 2 <<< ${{ env.DEFAULT_SOURCE }})
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_ENV
        if [[ -z "${{ github.event.inputs.Tempoary_CONFIG }}" ]]; then
            echo "TIMED_TRIGGER=true" >> $GITHUB_ENV
        else
            echo "UPLOAD_RELEASES=${{ github.event.inputs.UPLOAD_RELEASES }}" >> $GITHUB_ENV
            echo "UPLOAD_ARTIFACTS=${{ github.event.inputs.UPLOAD_ARTIFACTS }}" >> $GITHUB_ENV
            echo "UPLOAD_BIN_ARTIFACTS=${{ github.event.inputs.UPLOAD_BIN_ARTIFACTS }}" >> $GITHUB_ENV
        fi
    - name: TIMED_TRIGGER
      if: env.TIMED_TRIGGER == 'true'
      env:
        UPLOAD_RELEASES: true
        UPLOAD_ARTIFACTS: false
        UPLOAD_BIN_ARTIFACTS: false
      run: |
        echo "UPLOAD_RELEASES=${UPLOAD_RELEASES}" >> $GITHUB_ENV
        echo "UPLOAD_ARTIFACTS=${UPLOAD_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_ARTIFACTS=${UPLOAD_BIN_ARTIFACTS}" >> $GITHUB_ENV

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install busybox build-essential cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs rsync
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        if [ "${{ env.DELETE_USELESS_FILES }}" == true ]
        then
            docker rmi $(docker images -q)
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
            sudo -E apt-get -y autoremove --purge
            sudo -E apt-get clean
            sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /usr/lib/jvm /opt/ghc /swapfile
        fi

    - name: Accelerate
      if: env.CACHE_ACCELERATE == 'true'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: false
        toolchain: true
        skip: true
        clean: true
        prefix: ${{ github.workspace }}/AutoBuild-Actions/openwrt

    - name: Build OpenWrt
      id: compile
      run: |
        chmod +x ./build.sh
        GITHUB_WORKSPACE_OLD=${GITHUB_WORKSPACE}
        GITHUB_ENV_OLD=${GITHUB_ENV}
        ./build.sh ${CONFIG_FILE}
        GITHUB_WORKSPACE=${GITHUB_WORKSPACE_OLD}
        GITHUB_ENV=${GITHUB_ENV_OLD}
        ls AutoBuild-Actions/openwrt/bin/Firmware
        [ "$?" == 0 ] && echo "Compile_Result=true" >> $GITHUB_ENV || echo "Compile_Result=false" >> $GITHUB_ENV

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_firmware_${{ env.Compile_Date }}
        path: AutoBuild-Actions/openwrt/bin/Firmware

    - name: Upload bin to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_ARTIFACTS == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_bin_${{ env.Compile_Date }}
        path: AutoBuild-Actions/openwrt/bin

    - name: Upload Firmware to Release
      uses: svenstaro/upload-release-action@v2
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: AutoBuild-Actions/openwrt/bin/Firmware/*
        file_glob: true
        tag: AutoUpdate
        overwrite: true
        
    - name: Refresh API (1/2)
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      run: |
        wget https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O API
        
    - name: Refresh API (2/2)
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./API
        file_glob: true
        tag: AutoUpdate
        overwrite: true

    - name: Delete old Workflow Runs
      continue-on-error: true
      if: env.DELETE_OLD_WORKFLOW == 'true' && !cancelled()
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 0
